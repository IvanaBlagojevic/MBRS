package ${class.typePackage};

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
<#list importedPackages as imports>
	<#if !imports?starts_with(class.typePackage)>
import ${imports};
	</#if>
</#list>
import java.util.*;
import ${class.typePackage?keep_before_last(".")}.model.*;
import ${class.typePackage?keep_before_last(".")}.serviceImpl.*;
import ${class.typePackage?keep_before_last(".")}.dto.*;

//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


public class ${class.name}Controller {

	@Autowired
	protected ${class.name}ServiceImpl ${class.name?lower_case}Service;
	
	<#list properties as property>
		<#if property.linkedCharacteristics??>
	@Autowired
	protected ${property.type.name}ServiceImpl ${property.type.name?lower_case}Service;
		</#if>
	</#list>
	
	@RequestMapping(value = "", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getAll() {
		List<${class.name}> ${class.name?lower_case} = this.${class.name?lower_case}Service.findAll();
	 	List<${class.name}DTO> ${class.name?lower_case}DTO = new ArrayList<${class.name}DTO>();
	 	for(int i =0; i< ${class.name?lower_case}.size(); i++) {
	 		${class.name?lower_case}DTO.add(new ${class.name}DTO(${class.name?lower_case}.get(i)));
	 	}	
		return new ResponseEntity<>(${class.name?lower_case}DTO, HttpStatus.OK);
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getOne(@PathVariable Long id) {
		${class.name} ${class.name?lower_case} = this.${class.name?lower_case}Service.findOne(id);
		${class.name}DTO ${class.name?lower_case}DTO = new ${class.name}DTO(${class.name?lower_case});
		return new ResponseEntity(${class.name?lower_case}DTO, HttpStatus.OK);
	}
	
	
	<#if class.create>
	@RequestMapping(value = "/create", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> createOne(@RequestBody ${class.name}DTO ${class.name?lower_case}DTO) {
		<#assign x =false>
		<#list properties as property>
			<#if property.upper == 1 >
				<#if !property.persistentCharacteristics?? >
				<#assign x =true>
		${class.name} ${class.name?lower_case} = ${class.name?lower_case}DTO.convert();
		${class.name?lower_case}.set${property.name?cap_first}(this.${property.name?lower_case}Service.findOne(${class.name?lower_case}DTO.get${property.name?cap_first}()));
		${class.name?cap_first} ${class.name?lower_case}1 = this.${class.name?lower_case}Service.save${class.name}(${class.name?lower_case});		
				</#if>
			</#if>
		</#list>
		<#if x??>
			<#if x==false>
		${class.name?cap_first} ${class.name?lower_case}1 = this.${class.name?lower_case}Service.save${class.name}(${class.name?lower_case}DTO.convert());		
			</#if>
		</#if>
		return (${class.name?lower_case}1 == null) ? ResponseEntity.badRequest().build() : ResponseEntity.ok(${class.name?lower_case}1);
	
	}
	</#if>
	
	<#if class.update>
	@RequestMapping(value = "/update", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> updateOne(@RequestBody ${class.name}DTO ${class.name?lower_case}DTO) {
		<#assign x =false>
		<#list properties as property>
			<#if property.upper == 1 >
				<#if !property.persistentCharacteristics?? >
				<#assign x =true>
		${class.name} ${class.name?lower_case} = ${class.name?lower_case}DTO.convert();
		${class.name?lower_case}.set${property.name?cap_first}(this.${property.name?lower_case}Service.findOne(${class.name?lower_case}DTO.get${property.name?cap_first}()));
				</#if>
			</#if>
		</#list>
		<#if x??>
			<#if x==false>
		${class.name?cap_first} ${class.name?lower_case}1 = this.${class.name?lower_case}Service.save${class.name}(${class.name?lower_case}DTO.convert());		
			<#else>
		${class.name?cap_first} ${class.name?lower_case}1 = this.${class.name?lower_case}Service.save${class.name}(${class.name?lower_case});		
			</#if>
		</#if>
		return (${class.name?lower_case}1 == null) ? ResponseEntity.badRequest().build() : ResponseEntity.ok(${class.name?lower_case}1);
	
	}
	</#if>
	<#if class.delete>
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> deleteOne(@PathVariable Long id) {
		this.${class.name?lower_case}Service.remove${class.name}(id);
		return new ResponseEntity(null, HttpStatus.OK);
	}
	</#if>
	
<#list properties as property>
	<#if property.linkedCharacteristics??>
	@RequestMapping(value = "/${property.name}/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)	
	public ResponseEntity<?> get${property.name?cap_first}(@PathVariable Long id) {
		${class.name} ${class.name?lower_case} = this.${class.name?lower_case}Service.findOne(id);
		if (${class.name?lower_case} == null){
			return ResponseEntity.badRequest().build();
		}else{
			List<${property.type.name}> ${property.type.name?lower_case} = this.${property.type.name?lower_case}Service.findAll();
	 		List<${property.type.name}DTO> ${property.type.name?lower_case}DTO = new ArrayList<${property.type.name}DTO>();
	 		for(int i =0; i< ${property.type.name?lower_case}.size(); i++) {
	 		<#if property.linkedCharacteristics.oppositeUpper == -1>
	 			for( int j=0; j< ${property.type.name?lower_case}.get(i).get${class.name}().size(); j++) {
	 				if(${property.type.name?lower_case}.get(i).get${class.name}().get(j).getId() == id){
		 				${property.type.name?lower_case}DTO.add(new ${property.type.name}DTO(${property.type.name?lower_case}.get(i)));
		 			}
	 			}
	 		<#else>
	 			if(${property.type.name?lower_case}.get(i).get${class.name}().getId() == id){
	 				${property.type.name?lower_case}DTO.add(new ${property.type.name}DTO(${property.type.name?lower_case}.get(i)));
	 			}
	 		</#if>	
	 		}	
			return new ResponseEntity<>(${property.type.name?lower_case}DTO, HttpStatus.OK);
		}
	}
	
	</#if>
</#list>
}