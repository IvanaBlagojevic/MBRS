package ${class.typePackage};

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
<#list importedPackages as imports>
	<#if !imports?starts_with(class.typePackage)>
import ${imports};
	</#if>
</#list>
import java.util.*;
import ${class.typePackage?keep_before_last(".")}.model.*;
import ${class.typePackage?keep_before_last(".")}.serviceImpl.*;
import ${class.typePackage?keep_before_last(".")}.dto.*;

//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


public class ${class.name}Controller {

	@Autowired
	protected ${class.name}ServiceImpl ${class.name?lower_case}Service;

	@RequestMapping(value = "", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getAll() {
		List<${class.name}> ${class.name?lower_case} = this.${class.name?lower_case}Service.findAll();
	 	List<${class.name}DTO> ${class.name?lower_case}DTO = new ArrayList<${class.name}DTO>();
	 	for(int i =0; i< ${class.name?lower_case}.size(); i++) {
	 		${class.name?lower_case}DTO.add(new ${class.name}DTO(${class.name?lower_case}.get(i)));
	 	}	
		return new ResponseEntity<>(${class.name?lower_case}DTO, HttpStatus.OK);
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getOne(@PathVariable Long id) {
		${class.name} ${class.name?lower_case} = this.${class.name?lower_case}Service.findOne(id);
		${class.name}DTO ${class.name?lower_case}DTO = new ${class.name}DTO(${class.name?lower_case});
		return new ResponseEntity(${class.name?lower_case}DTO, HttpStatus.OK);
	}
	
	
	<#if class.create>
	@RequestMapping(value = "/create", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> createOne(@RequestBody ${class.name}DTO ${class.name?lower_case}DTO) {
		${class.name?cap_first} ${class.name?lower_case} = this.${class.name?lower_case}Service.save${class.name}(${class.name?lower_case}DTO.convert());
		
		return (${class.name?lower_case} == null) ? ResponseEntity.badRequest().build() : ResponseEntity.ok(${class.name?lower_case});
	
	}
	</#if>
	
	<#if class.update>
	@RequestMapping(value = "/update", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> updateOne(@RequestBody ${class.name}DTO ${class.name?lower_case}DTO) {
		${class.name?cap_first} ${class.name?lower_case} = this.${class.name?lower_case}Service.save${class.name}(${class.name?lower_case}DTO.convert());
		
		return (${class.name?lower_case} == null) ? ResponseEntity.badRequest().build() : ResponseEntity.ok(${class.name?lower_case});
	
	}
	</#if>
	<#if class.delete>
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> deleteOne(@PathVariable Long id) {
		this.${class.name?lower_case}Service.remove${class.name}(id);
		return new ResponseEntity(null, HttpStatus.OK);
	}
	</#if>
}